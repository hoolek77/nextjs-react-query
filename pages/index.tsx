import { dehydrate, QueryClient } from '@tanstack/react-query'
import { useEffect, useState } from 'react'

import type { GetServerSideProps, InferGetServerSidePropsType } from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'

import fetchCharacters from '@/api/fetch-characters'
import CharactersList from '@/components/characters-list'
import Pagination from '@/components/pagination'
import useCharactersQuery from '@/hooks/use-characters-query'

import type { ParsedUrlQuery } from 'querystring'
import styled from 'styled-components'

const FIRST_PAGE = 1
const PAGE_SIZE = 20

const getInitialPageFromQuery = (query: ParsedUrlQuery) => {
  const page = Number(query.page)

  if (Number.isNaN(page) || page < FIRST_PAGE) {
    return FIRST_PAGE
  }

  return page
}

export const getServerSideProps: GetServerSideProps<{
  initialPage: number
}> = async (ctx) => {
  const queryClient = new QueryClient()

  const page = getInitialPageFromQuery(ctx.query)

  await queryClient.prefetchQuery(['characters', page], () =>
    fetchCharacters(page)
  )

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
      initialPage: page,
    },
  }
}
export default function Home({
  initialPage,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const router = useRouter()
  const [page, setPage] = useState(initialPage)
  const { data, isLoading, isFetching, isError } = useCharactersQuery(page)

  useEffect(() => {
    router.replace(`/?page=${page}`, undefined, { shallow: true })
  }, [page])

  return (
    <>
      <Head>
        <title>Rick & Morty react-query</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Heading>Rick & Morty Pagination</Heading>
        <Pagination
          count={data?.info.count as number}
          currentPage={page}
          onPageChange={(pageNumber) => setPage(pageNumber)}
          pageSize={PAGE_SIZE}
          disabled={isLoading || isFetching}
        />
        <CharactersList data={data} isLoading={isLoading} isError={isError} />
      </main>
    </>
  )
}

const Heading = styled.h1`
  font-weight: 500;
`
